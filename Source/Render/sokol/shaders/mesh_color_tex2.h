#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc --input mesh_color_texture.glsl --output mesh_color_tex2.h --slang glsl410:glsl300es:hlsl5:metal_macos:metal_ios:metal_sim --format=sokol --reflection --ifdef --defines=SHADER_TEX_2 --module mesh_color_tex2

    Overview:
    =========
    Shader program: 'program':
        Get shader desc: mesh_color_tex2_program_shader_desc(sg_query_backend());
        Vertex shader: vs
            Attributes:
                ATTR_mesh_color_tex2_vs_vs_position => 0
                ATTR_mesh_color_tex2_vs_vs_color => 1
                ATTR_mesh_color_tex2_vs_vs_texcoord0 => 2
                ATTR_mesh_color_tex2_vs_vs_texcoord1 => 3
            Uniform block 'mesh_color_texture_vs_params':
                C struct: mesh_color_tex2_mesh_color_texture_vs_params_t
                Bind slot: SLOT_mesh_color_tex2_mesh_color_texture_vs_params => 0
        Fragment shader: fs
            Uniform block 'mesh_color_texture_fs_params':
                C struct: mesh_color_tex2_mesh_color_texture_fs_params_t
                Bind slot: SLOT_mesh_color_tex2_mesh_color_texture_fs_params => 0
            Image 'un_tex0':
                Image type: SG_IMAGETYPE_2D
                Sample type: SG_IMAGESAMPLETYPE_FLOAT
                Multisampled: false
                Bind slot: SLOT_mesh_color_tex2_un_tex0 => 0
            Image 'un_tex1':
                Image type: SG_IMAGETYPE_2D
                Sample type: SG_IMAGESAMPLETYPE_FLOAT
                Multisampled: false
                Bind slot: SLOT_mesh_color_tex2_un_tex1 => 1
            Sampler 'un_sampler0':
                Type: SG_SAMPLERTYPE_FILTERING
                Bind slot: SLOT_mesh_color_tex2_un_sampler0 => 0
            Image Sampler Pair 'un_tex0_un_sampler0':
                Image: un_tex0
                Sampler: un_sampler0
            Image Sampler Pair 'un_tex1_un_sampler0':
                Image: un_tex1
                Sampler: un_sampler0
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before mesh_color_tex2.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_mesh_color_tex2_vs_vs_position (0)
#define ATTR_mesh_color_tex2_vs_vs_color (1)
#define ATTR_mesh_color_tex2_vs_vs_texcoord0 (2)
#define ATTR_mesh_color_tex2_vs_vs_texcoord1 (3)
#define SLOT_mesh_color_tex2_mesh_color_texture_vs_params (0)
#define SLOT_mesh_color_tex2_mesh_color_texture_fs_params (0)
#define SLOT_mesh_color_tex2_un_tex0 (0)
#define SLOT_mesh_color_tex2_un_tex1 (1)
#define SLOT_mesh_color_tex2_un_sampler0 (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct mesh_color_tex2_mesh_color_texture_vs_params_t {
    Mat4f un_mvp;
    Mat4f tex0_mat;
    Mat4f tex1_mat;
} mesh_color_tex2_mesh_color_texture_vs_params_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct mesh_color_tex2_mesh_color_texture_fs_params_t {
    int un_color_mode;
    float un_tex2_lerp;
    float un_alpha_test;
    uint8_t _pad_12[4];
} mesh_color_tex2_mesh_color_texture_fs_params_t;
#pragma pack(pop)
/*
    #version 410

    uniform vec4 mesh_color_texture_vs_params[12];
    layout(location = 0) in vec3 vs_position;
    layout(location = 0) out vec4 fs_color;
    layout(location = 1) in vec4 vs_color;
    layout(location = 1) out vec2 fs_uv0;
    layout(location = 2) in vec2 vs_texcoord0;
    layout(location = 2) out vec2 fs_uv1;
    layout(location = 3) in vec2 vs_texcoord1;

    void main()
    {
        gl_Position = mat4(mesh_color_texture_vs_params[0], mesh_color_texture_vs_params[1], mesh_color_texture_vs_params[2], mesh_color_texture_vs_params[3]) * vec4(vs_position, 1.0);
        fs_color = vs_color;
        fs_uv0 = (mat4(mesh_color_texture_vs_params[4], mesh_color_texture_vs_params[5], mesh_color_texture_vs_params[6], mesh_color_texture_vs_params[7]) * vec4(vs_texcoord0, 1.0, 1.0)).xy;
        fs_uv1 = (mat4(mesh_color_texture_vs_params[8], mesh_color_texture_vs_params[9], mesh_color_texture_vs_params[10], mesh_color_texture_vs_params[11]) * vec4(vs_texcoord1, 1.0, 1.0)).xy;
    }

*/
#if defined(SOKOL_GLCORE)
static const uint8_t mesh_color_tex2_vs_source_glsl410[945] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x6d,0x65,0x73,0x68,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x32,0x5d,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x73,0x5f,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,
    0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,
    0x65,0x63,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,
    0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,
    0x6f,0x6f,0x72,0x64,0x30,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x6f,0x75,0x74,0x20,
    0x76,0x65,0x63,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,
    0x63,0x6f,0x6f,0x72,0x64,0x31,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x6d,0x65,
    0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x6d,
    0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,
    0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,
    0x20,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,
    0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x73,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,
    0x3d,0x20,0x28,0x6d,0x61,0x74,0x34,0x28,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x36,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,
    0x63,0x34,0x28,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x2c,
    0x20,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x20,0x3d,0x20,0x28,0x6d,0x61,
    0x74,0x34,0x28,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x38,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x39,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x31,0x30,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x31,0x31,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,
    0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x31,0x2c,0x20,0x31,0x2e,
    0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
#endif
/*
    #version 410

    struct mesh_color_texture_fs_params
    {
        int un_color_mode;
        float un_tex2_lerp;
        float un_alpha_test;
    };

    uniform mesh_color_texture_fs_params _29;

    uniform sampler2D un_tex0_un_sampler0;
    uniform sampler2D un_tex1_un_sampler0;

    layout(location = 1) in vec2 fs_uv0;
    layout(location = 2) in vec2 fs_uv1;
    layout(location = 0) out vec4 frag_color;
    layout(location = 0) in vec4 fs_color;

    void main()
    {
        vec4 tex0 = texture(un_tex0_un_sampler0, fs_uv0);
        if (0.0 <= _29.un_tex2_lerp)
        {
            float _50 = 1.0 - _29.un_tex2_lerp;
            tex0 = fma(tex0, vec4(_29.un_tex2_lerp, _29.un_tex2_lerp, _29.un_tex2_lerp, 1.0), vec4(_50, _50, _50, 0.0));
        }
        vec4 _66 = texture(un_tex1_un_sampler0, fs_uv1);
        switch (_29.un_color_mode)
        {
            case 1:
            {
                frag_color = (_66 + tex0) * fs_color;
                break;
            }
            case 2:
            {
                frag_color = ((_66 * tex0) * 2.0) * fs_color;
                break;
            }
            case 3:
            {
                frag_color = ((_66 * tex0) * 4.0) * fs_color;
                break;
            }
            default:
            {
                frag_color = (_66 * tex0) * fs_color;
                break;
            }
        }
        if (_29.un_alpha_test >= frag_color.w)
        {
            discard;
        }
    }

*/
#if defined(SOKOL_GLCORE)
static const uint8_t mesh_color_tex2_fs_source_glsl410[1289] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x75,0x6e,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x5f,0x6d,0x6f,0x64,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,
    0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x75,0x6e,0x5f,
    0x61,0x6c,0x70,0x68,0x61,0x5f,0x74,0x65,0x73,0x74,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x66,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x20,0x5f,0x32,0x39,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x75,0x6e,0x5f,
    0x74,0x65,0x78,0x30,0x5f,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,
    0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x32,0x44,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x31,0x5f,0x75,0x6e,0x5f,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x73,0x5f,0x75,
    0x76,0x31,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,
    0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x74,0x65,0x78,
    0x30,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x6e,0x5f,0x74,
    0x65,0x78,0x30,0x5f,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x2c,
    0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x30,0x2e,0x30,0x20,0x3c,0x3d,0x20,0x5f,0x32,0x39,0x2e,0x75,0x6e,0x5f,
    0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x35,0x30,0x20,0x3d,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,0x5f,0x32,0x39,0x2e,0x75,
    0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x74,0x65,0x78,0x30,0x20,0x3d,0x20,0x66,0x6d,0x61,0x28,
    0x74,0x65,0x78,0x30,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x32,0x39,0x2e,0x75,
    0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,0x2c,0x20,0x5f,0x32,0x39,
    0x2e,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,0x2c,0x20,0x5f,
    0x32,0x39,0x2e,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,0x2c,
    0x20,0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x35,0x30,0x2c,
    0x20,0x5f,0x35,0x30,0x2c,0x20,0x5f,0x35,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,
    0x20,0x5f,0x36,0x36,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,
    0x6e,0x5f,0x74,0x65,0x78,0x31,0x5f,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x30,0x2c,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x73,0x77,0x69,0x74,0x63,0x68,0x20,0x28,0x5f,0x32,0x39,0x2e,0x75,0x6e,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x6d,0x6f,0x64,0x65,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x31,
    0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x28,0x5f,0x36,0x36,0x20,0x2b,0x20,0x74,0x65,0x78,0x30,
    0x29,0x20,0x2a,0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,0x6b,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x32,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x28,0x28,
    0x5f,0x36,0x36,0x20,0x2a,0x20,0x74,0x65,0x78,0x30,0x29,0x20,0x2a,0x20,0x32,0x2e,
    0x30,0x29,0x20,0x2a,0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,0x6b,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x33,0x3a,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x28,
    0x28,0x5f,0x36,0x36,0x20,0x2a,0x20,0x74,0x65,0x78,0x30,0x29,0x20,0x2a,0x20,0x34,
    0x2e,0x30,0x29,0x20,0x2a,0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,
    0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x64,0x65,0x66,0x61,0x75,0x6c,0x74,0x3a,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x28,0x5f,0x36,0x36,0x20,0x2a,0x20,0x74,0x65,0x78,0x30,0x29,0x20,0x2a,0x20,
    0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,0x6b,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x2e,0x75,0x6e,0x5f,0x61,0x6c,0x70,0x68,
    0x61,0x5f,0x74,0x65,0x73,0x74,0x20,0x3e,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #version 300 es

    uniform vec4 mesh_color_texture_vs_params[12];
    layout(location = 0) in vec3 vs_position;
    out vec4 fs_color;
    layout(location = 1) in vec4 vs_color;
    out vec2 fs_uv0;
    layout(location = 2) in vec2 vs_texcoord0;
    out vec2 fs_uv1;
    layout(location = 3) in vec2 vs_texcoord1;

    void main()
    {
        gl_Position = mat4(mesh_color_texture_vs_params[0], mesh_color_texture_vs_params[1], mesh_color_texture_vs_params[2], mesh_color_texture_vs_params[3]) * vec4(vs_position, 1.0);
        fs_color = vs_color;
        fs_uv0 = (mat4(mesh_color_texture_vs_params[4], mesh_color_texture_vs_params[5], mesh_color_texture_vs_params[6], mesh_color_texture_vs_params[7]) * vec4(vs_texcoord0, 1.0, 1.0)).xy;
        fs_uv1 = (mat4(mesh_color_texture_vs_params[8], mesh_color_texture_vs_params[9], mesh_color_texture_vs_params[10], mesh_color_texture_vs_params[11]) * vec4(vs_texcoord1, 1.0, 1.0)).xy;
    }

*/
#if defined(SOKOL_GLES3)
static const uint8_t mesh_color_tex2_vs_source_glsl300es[885] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x6d,0x65,
    0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x32,0x5d,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x73,0x5f,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x34,0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x73,0x5f,
    0x75,0x76,0x30,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x32,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x3b,0x0a,
    0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x73,
    0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x31,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,
    0x34,0x28,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,
    0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x31,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x32,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x73,0x5f,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,
    0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,
    0x75,0x76,0x30,0x20,0x3d,0x20,0x28,0x6d,0x61,0x74,0x34,0x28,0x6d,0x65,0x73,0x68,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2c,0x20,0x6d,0x65,0x73,
    0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x2c,0x20,0x6d,0x65,
    0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x36,0x5d,0x2c,0x20,0x6d,
    0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x20,
    0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,
    0x72,0x64,0x30,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,
    0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x20,0x3d,
    0x20,0x28,0x6d,0x61,0x74,0x34,0x28,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x38,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x39,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x30,0x5d,0x2c,0x20,0x6d,0x65,0x73,0x68,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x31,0x5d,0x29,0x20,0x2a,0x20,0x76,
    0x65,0x63,0x34,0x28,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x31,
    0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #version 300 es
    precision mediump float;
    precision highp int;

    struct mesh_color_texture_fs_params
    {
        int un_color_mode;
        highp float un_tex2_lerp;
        highp float un_alpha_test;
    };

    uniform mesh_color_texture_fs_params _29;

    uniform highp sampler2D un_tex0_un_sampler0;
    uniform highp sampler2D un_tex1_un_sampler0;

    in highp vec2 fs_uv0;
    in highp vec2 fs_uv1;
    layout(location = 0) out highp vec4 frag_color;
    in highp vec4 fs_color;

    void main()
    {
        highp vec4 tex0 = texture(un_tex0_un_sampler0, fs_uv0);
        if (0.0 <= _29.un_tex2_lerp)
        {
            highp float _50 = 1.0 - _29.un_tex2_lerp;
            tex0 = tex0 * vec4(_29.un_tex2_lerp, _29.un_tex2_lerp, _29.un_tex2_lerp, 1.0) + vec4(_50, _50, _50, 0.0);
        }
        highp vec4 _66 = texture(un_tex1_un_sampler0, fs_uv1);
        switch (_29.un_color_mode)
        {
            case 1:
            {
                frag_color = (_66 + tex0) * fs_color;
                break;
            }
            case 2:
            {
                frag_color = ((_66 * tex0) * 2.0) * fs_color;
                break;
            }
            case 3:
            {
                frag_color = ((_66 * tex0) * 4.0) * fs_color;
                break;
            }
            default:
            {
                frag_color = (_66 * tex0) * fs_color;
                break;
            }
        }
        if (_29.un_alpha_test >= frag_color.w)
        {
            discard;
        }
    }

*/
#if defined(SOKOL_GLES3)
static const uint8_t mesh_color_tex2_fs_source_glsl300es[1338] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x73,
    0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x75,0x6e,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x6d,0x6f,0x64,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x75,0x6e,0x5f,0x74,
    0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x75,0x6e,0x5f,0x61,0x6c,0x70,
    0x68,0x61,0x5f,0x74,0x65,0x73,0x74,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,
    0x66,0x6f,0x72,0x6d,0x20,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x20,0x5f,0x32,0x39,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x5f,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x30,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x75,0x6e,0x5f,
    0x74,0x65,0x78,0x31,0x5f,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,
    0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,
    0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,
    0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x34,0x20,0x74,0x65,0x78,0x30,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x5f,0x75,0x6e,0x5f,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x2c,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x30,0x2e,0x30,0x20,0x3c,0x3d,
    0x20,0x5f,0x32,0x39,0x2e,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,
    0x70,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x35,0x30,
    0x20,0x3d,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,0x5f,0x32,0x39,0x2e,0x75,0x6e,0x5f,
    0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x74,0x65,0x78,0x30,0x20,0x3d,0x20,0x74,0x65,0x78,0x30,0x20,0x2a,
    0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x32,0x39,0x2e,0x75,0x6e,0x5f,0x74,0x65,0x78,
    0x32,0x5f,0x6c,0x65,0x72,0x70,0x2c,0x20,0x5f,0x32,0x39,0x2e,0x75,0x6e,0x5f,0x74,
    0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,0x2c,0x20,0x5f,0x32,0x39,0x2e,0x75,0x6e,
    0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x20,0x2b,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,0x35,0x30,0x2c,0x20,0x5f,0x35,0x30,
    0x2c,0x20,0x5f,0x35,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x5f,0x36,0x36,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,
    0x75,0x6e,0x5f,0x74,0x65,0x78,0x31,0x5f,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x30,0x2c,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x73,0x77,0x69,0x74,0x63,0x68,0x20,0x28,0x5f,0x32,0x39,0x2e,0x75,0x6e,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x6d,0x6f,0x64,0x65,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,
    0x31,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x28,0x5f,0x36,0x36,0x20,0x2b,0x20,0x74,0x65,0x78,
    0x30,0x29,0x20,0x2a,0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,0x6b,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x32,0x3a,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x28,
    0x28,0x5f,0x36,0x36,0x20,0x2a,0x20,0x74,0x65,0x78,0x30,0x29,0x20,0x2a,0x20,0x32,
    0x2e,0x30,0x29,0x20,0x2a,0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,
    0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x33,0x3a,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x28,0x28,0x5f,0x36,0x36,0x20,0x2a,0x20,0x74,0x65,0x78,0x30,0x29,0x20,0x2a,0x20,
    0x34,0x2e,0x30,0x29,0x20,0x2a,0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,
    0x61,0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x65,0x66,0x61,0x75,0x6c,0x74,0x3a,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x28,0x5f,0x36,0x36,0x20,0x2a,0x20,0x74,0x65,0x78,0x30,0x29,0x20,0x2a,
    0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,0x6b,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x2e,0x75,0x6e,0x5f,0x61,0x6c,0x70,
    0x68,0x61,0x5f,0x74,0x65,0x73,0x74,0x20,0x3e,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    cbuffer mesh_color_texture_vs_params : register(b0)
    {
        row_major float4x4 _19_un_mvp : packoffset(c0);
        row_major float4x4 _19_tex0_mat : packoffset(c4);
        row_major float4x4 _19_tex1_mat : packoffset(c8);
    };


    static float4 gl_Position;
    static float3 vs_position;
    static float4 fs_color;
    static float4 vs_color;
    static float2 fs_uv0;
    static float2 vs_texcoord0;
    static float2 fs_uv1;
    static float2 vs_texcoord1;

    struct SPIRV_Cross_Input
    {
        float3 vs_position : TEXCOORD0;
        float4 vs_color : TEXCOORD1;
        float2 vs_texcoord0 : TEXCOORD2;
        float2 vs_texcoord1 : TEXCOORD3;
    };

    struct SPIRV_Cross_Output
    {
        float4 fs_color : TEXCOORD0;
        float2 fs_uv0 : TEXCOORD1;
        float2 fs_uv1 : TEXCOORD2;
        float4 gl_Position : SV_Position;
    };

    void vert_main()
    {
        gl_Position = mul(float4(vs_position, 1.0f), _19_un_mvp);
        fs_color = vs_color;
        fs_uv0 = mul(float4(vs_texcoord0, 1.0f, 1.0f), _19_tex0_mat).xy;
        fs_uv1 = mul(float4(vs_texcoord1, 1.0f, 1.0f), _19_tex1_mat).xy;
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        vs_position = stage_input.vs_position;
        vs_color = stage_input.vs_color;
        vs_texcoord0 = stage_input.vs_texcoord0;
        vs_texcoord1 = stage_input.vs_texcoord1;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.fs_color = fs_color;
        stage_output.fs_uv0 = fs_uv0;
        stage_output.fs_uv1 = fs_uv1;
        return stage_output;
    }
*/
#if defined(SOKOL_D3D11)
static const uint8_t mesh_color_tex2_vs_source_hlsl5[1467] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,
    0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,0x77,0x5f,0x6d,0x61,
    0x6a,0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x31,0x39,
    0x5f,0x75,0x6e,0x5f,0x6d,0x76,0x70,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,
    0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,
    0x77,0x5f,0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,
    0x20,0x5f,0x31,0x39,0x5f,0x74,0x65,0x78,0x30,0x5f,0x6d,0x61,0x74,0x20,0x3a,0x20,
    0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x34,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x6f,0x77,0x5f,0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x31,0x39,0x5f,0x74,0x65,0x78,0x31,0x5f,
    0x6d,0x61,0x74,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,
    0x28,0x63,0x38,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,
    0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,
    0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,
    0x73,0x5f,0x75,0x76,0x30,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,
    0x30,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,
    0x72,0x64,0x31,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,
    0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x73,0x5f,0x70,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,
    0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,
    0x76,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,
    0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x20,0x3a,0x20,
    0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,
    0x64,0x31,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x33,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,
    0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x73,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,
    0x76,0x30,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,
    0x31,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x32,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x76,0x65,
    0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x75,
    0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x2c,0x20,0x5f,0x31,0x39,
    0x5f,0x75,0x6e,0x5f,0x6d,0x76,0x70,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x73,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x3d,0x20,
    0x6d,0x75,0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x74,0x65,
    0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x2c,0x20,0x31,0x2e,0x30,0x66,0x2c,0x20,0x31,
    0x2e,0x30,0x66,0x29,0x2c,0x20,0x5f,0x31,0x39,0x5f,0x74,0x65,0x78,0x30,0x5f,0x6d,
    0x61,0x74,0x29,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,
    0x76,0x31,0x20,0x3d,0x20,0x6d,0x75,0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x31,0x2c,0x20,0x31,0x2e,
    0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x2c,0x20,0x5f,0x31,0x39,0x5f,0x74,
    0x65,0x78,0x31,0x5f,0x6d,0x61,0x74,0x29,0x2e,0x78,0x79,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,
    0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x73,0x5f,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x76,
    0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x73,0x5f,
    0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x30,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,
    0x6f,0x72,0x64,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,
    0x63,0x6f,0x6f,0x72,0x64,0x31,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x70,0x75,0x74,0x2e,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,
    0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,
    0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,
    0x76,0x30,0x20,0x3d,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x73,
    0x5f,0x75,0x76,0x31,0x20,0x3d,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
#endif
/*
    cbuffer mesh_color_texture_fs_params : register(b0)
    {
        int _29_un_color_mode : packoffset(c0);
        float _29_un_tex2_lerp : packoffset(c0.y);
        float _29_un_alpha_test : packoffset(c0.z);
    };

    Texture2D<float4> un_tex0 : register(t0);
    SamplerState un_sampler0 : register(s0);
    Texture2D<float4> un_tex1 : register(t1);

    static float2 fs_uv0;
    static float2 fs_uv1;
    static float4 frag_color;
    static float4 fs_color;

    struct SPIRV_Cross_Input
    {
        float4 fs_color : TEXCOORD0;
        float2 fs_uv0 : TEXCOORD1;
        float2 fs_uv1 : TEXCOORD2;
    };

    struct SPIRV_Cross_Output
    {
        float4 frag_color : SV_Target0;
    };

    void frag_main()
    {
        float4 tex0 = un_tex0.Sample(un_sampler0, fs_uv0);
        if (0.0f <= _29_un_tex2_lerp)
        {
            float _50 = 1.0f - _29_un_tex2_lerp;
            tex0 = mad(tex0, float4(_29_un_tex2_lerp, _29_un_tex2_lerp, _29_un_tex2_lerp, 1.0f), float4(_50, _50, _50, 0.0f));
        }
        float4 _66 = un_tex1.Sample(un_sampler0, fs_uv1);
        switch (_29_un_color_mode)
        {
            case 1:
            {
                frag_color = (_66 + tex0) * fs_color;
                break;
            }
            case 2:
            {
                frag_color = ((_66 * tex0) * 2.0f) * fs_color;
                break;
            }
            case 3:
            {
                frag_color = ((_66 * tex0) * 4.0f) * fs_color;
                break;
            }
            default:
            {
                frag_color = (_66 * tex0) * fs_color;
                break;
            }
        }
        if (_29_un_alpha_test >= frag_color.w)
        {
            discard;
        }
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        fs_uv0 = stage_input.fs_uv0;
        fs_uv1 = stage_input.fs_uv1;
        fs_color = stage_input.fs_color;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.frag_color = frag_color;
        return stage_output;
    }
*/
#if defined(SOKOL_D3D11)
static const uint8_t mesh_color_tex2_fs_source_hlsl5[1795] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x66,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,
    0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,
    0x39,0x5f,0x75,0x6e,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x6d,0x6f,0x64,0x65,0x20,
    0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x39,0x5f,
    0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,0x20,0x3a,0x20,0x70,
    0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x2e,0x79,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x32,0x39,0x5f,0x75,
    0x6e,0x5f,0x61,0x6c,0x70,0x68,0x61,0x5f,0x74,0x65,0x73,0x74,0x20,0x3a,0x20,0x70,
    0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x2e,0x7a,0x29,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x3c,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x20,0x3a,
    0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x30,0x29,0x3b,0x0a,0x53,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x75,0x6e,0x5f,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,
    0x65,0x72,0x28,0x73,0x30,0x29,0x3b,0x0a,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,
    0x44,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,
    0x31,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x31,0x29,
    0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x3b,0x0a,0x73,
    0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,
    0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,
    0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x20,0x3a,
    0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x32,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,
    0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0x30,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x74,0x65,0x78,0x30,0x20,0x3d,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,
    0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x30,0x2c,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x30,0x2e,0x30,0x66,0x20,0x3c,0x3d,0x20,0x5f,0x32,
    0x39,0x5f,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x35,0x30,0x20,0x3d,0x20,0x31,0x2e,0x30,0x66,0x20,0x2d,
    0x20,0x5f,0x32,0x39,0x5f,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,
    0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x74,0x65,0x78,0x30,0x20,
    0x3d,0x20,0x6d,0x61,0x64,0x28,0x74,0x65,0x78,0x30,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x28,0x5f,0x32,0x39,0x5f,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,
    0x65,0x72,0x70,0x2c,0x20,0x5f,0x32,0x39,0x5f,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,
    0x5f,0x6c,0x65,0x72,0x70,0x2c,0x20,0x5f,0x32,0x39,0x5f,0x75,0x6e,0x5f,0x74,0x65,
    0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x2c,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x5f,0x35,0x30,0x2c,0x20,0x5f,0x35,0x30,0x2c,
    0x20,0x5f,0x35,0x30,0x2c,0x20,0x30,0x2e,0x30,0x66,0x29,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,
    0x36,0x36,0x20,0x3d,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x31,0x2e,0x53,0x61,0x6d,
    0x70,0x6c,0x65,0x28,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x2c,
    0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x77,
    0x69,0x74,0x63,0x68,0x20,0x28,0x5f,0x32,0x39,0x5f,0x75,0x6e,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x5f,0x6d,0x6f,0x64,0x65,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x31,0x3a,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x28,0x5f,0x36,0x36,0x20,0x2b,0x20,0x74,0x65,0x78,0x30,0x29,0x20,0x2a,
    0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,0x6b,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x63,0x61,0x73,0x65,0x20,0x32,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x28,0x28,0x5f,0x36,0x36,
    0x20,0x2a,0x20,0x74,0x65,0x78,0x30,0x29,0x20,0x2a,0x20,0x32,0x2e,0x30,0x66,0x29,
    0x20,0x2a,0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,0x6b,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x33,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x28,0x28,0x5f,
    0x36,0x36,0x20,0x2a,0x20,0x74,0x65,0x78,0x30,0x29,0x20,0x2a,0x20,0x34,0x2e,0x30,
    0x66,0x29,0x20,0x2a,0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,0x6b,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x64,0x65,0x66,0x61,0x75,0x6c,0x74,0x3a,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x28,0x5f,0x36,0x36,0x20,0x2a,0x20,0x74,0x65,0x78,0x30,0x29,0x20,0x2a,0x20,0x66,
    0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x5f,0x75,0x6e,0x5f,0x61,0x6c,0x70,0x68,0x61,
    0x5f,0x74,0x65,0x73,0x74,0x20,0x3e,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x2e,0x77,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,
    0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,
    0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x3d,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x30,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,0x20,0x3d,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x31,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x66,0x73,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,
    0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,
    0x7d,0x0a,0x00,
};
#endif
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct mesh_color_texture_vs_params
    {
        float4x4 un_mvp;
        float4x4 tex0_mat;
        float4x4 tex1_mat;
    };

    struct main0_out
    {
        float4 fs_color [[user(locn0)]];
        float2 fs_uv0 [[user(locn1)]];
        float2 fs_uv1 [[user(locn2)]];
        float4 gl_Position [[position]];
    };

    struct main0_in
    {
        float3 vs_position [[attribute(0)]];
        float4 vs_color [[attribute(1)]];
        float2 vs_texcoord0 [[attribute(2)]];
        float2 vs_texcoord1 [[attribute(3)]];
    };

    vertex main0_out main0(main0_in in [[stage_in]], constant mesh_color_texture_vs_params& _19 [[buffer(0)]])
    {
        main0_out out = {};
        out.gl_Position = _19.un_mvp * float4(in.vs_position, 1.0);
        out.fs_color = in.vs_color;
        out.fs_uv0 = (_19.tex0_mat * float4(in.vs_texcoord0, 1.0, 1.0)).xy;
        out.fs_uv1 = (_19.tex1_mat * float4(in.vs_texcoord1, 1.0, 1.0)).xy;
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t mesh_color_tex2_vs_source_metal_macos[926] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x75,0x6e,0x5f,0x6d,0x76,
    0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,
    0x74,0x65,0x78,0x30,0x5f,0x6d,0x61,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x74,0x65,0x78,0x31,0x5f,0x6d,0x61,0x74,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x75,0x73,
    0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x5b,
    0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,
    0x31,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x32,0x29,0x5d,
    0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,
    0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x76,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x61,0x74,0x74,
    0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,
    0x6f,0x72,0x64,0x30,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,
    0x28,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x31,0x20,0x5b,
    0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x33,0x29,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x6d,
    0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x31,0x39,
    0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,
    0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,
    0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x5f,0x31,0x39,0x2e,0x75,0x6e,0x5f,0x6d,0x76,0x70,0x20,0x2a,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,
    0x74,0x2e,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x69,0x6e,0x2e,
    0x76,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,
    0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x3d,0x20,0x28,0x5f,0x31,0x39,0x2e,
    0x74,0x65,0x78,0x30,0x5f,0x6d,0x61,0x74,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x69,0x6e,0x2e,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,
    0x30,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x31,
    0x20,0x3d,0x20,0x28,0x5f,0x31,0x39,0x2e,0x74,0x65,0x78,0x31,0x5f,0x6d,0x61,0x74,
    0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x76,0x73,0x5f,
    0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x31,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct mesh_color_texture_fs_params
    {
        int un_color_mode;
        float un_tex2_lerp;
        float un_alpha_test;
    };

    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };

    struct main0_in
    {
        float4 fs_color [[user(locn0)]];
        float2 fs_uv0 [[user(locn1)]];
        float2 fs_uv1 [[user(locn2)]];
    };

    fragment main0_out main0(main0_in in [[stage_in]], constant mesh_color_texture_fs_params& _29 [[buffer(0)]], texture2d<float> un_tex0 [[texture(0)]], texture2d<float> un_tex1 [[texture(1)]], sampler un_sampler0 [[sampler(0)]])
    {
        main0_out out = {};
        float4 tex0 = un_tex0.sample(un_sampler0, in.fs_uv0);
        if (0.0 <= _29.un_tex2_lerp)
        {
            float _50 = 1.0 - _29.un_tex2_lerp;
            tex0 = fma(tex0, float4(_29.un_tex2_lerp, _29.un_tex2_lerp, _29.un_tex2_lerp, 1.0), float4(_50, _50, _50, 0.0));
        }
        float4 _66 = un_tex1.sample(un_sampler0, in.fs_uv1);
        switch (_29.un_color_mode)
        {
            case 1:
            {
                out.frag_color = (_66 + tex0) * in.fs_color;
                break;
            }
            case 2:
            {
                out.frag_color = ((_66 * tex0) * 2.0) * in.fs_color;
                break;
            }
            case 3:
            {
                out.frag_color = ((_66 * tex0) * 4.0) * in.fs_color;
                break;
            }
            default:
            {
                out.frag_color = (_66 * tex0) * in.fs_color;
                break;
            }
        }
        if (_29.un_alpha_test >= out.frag_color.w)
        {
            discard_fragment();
        }
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t mesh_color_tex2_fs_source_metal_macos[1567] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x6e,0x74,0x20,0x75,0x6e,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x6d,
    0x6f,0x64,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x75,
    0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x75,0x6e,0x5f,0x61,0x6c,0x70,0x68,0x61,0x5f,
    0x74,0x65,0x73,0x74,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x5b,0x5b,
    0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x32,0x29,0x5d,0x5d,
    0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,
    0x74,0x20,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,
    0x5f,0x32,0x39,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,
    0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,
    0x61,0x74,0x3e,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x20,0x5b,0x5b,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x75,0x6e,0x5f,
    0x74,0x65,0x78,0x31,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x31,
    0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x75,0x6e,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,
    0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x74,0x65,
    0x78,0x30,0x20,0x3d,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x2e,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x28,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x2c,
    0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x75,0x76,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x30,0x2e,0x30,0x20,0x3c,0x3d,0x20,0x5f,0x32,0x39,0x2e,
    0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,0x29,0x0a,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x5f,0x35,0x30,0x20,0x3d,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,0x5f,0x32,
    0x39,0x2e,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x74,0x65,0x78,0x30,0x20,0x3d,0x20,0x66,
    0x6d,0x61,0x28,0x74,0x65,0x78,0x30,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x5f,0x32,0x39,0x2e,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,
    0x2c,0x20,0x5f,0x32,0x39,0x2e,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,
    0x72,0x70,0x2c,0x20,0x5f,0x32,0x39,0x2e,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,
    0x6c,0x65,0x72,0x70,0x2c,0x20,0x31,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x28,0x5f,0x35,0x30,0x2c,0x20,0x5f,0x35,0x30,0x2c,0x20,0x5f,0x35,0x30,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x36,0x36,0x20,0x3d,0x20,
    0x75,0x6e,0x5f,0x74,0x65,0x78,0x31,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x75,
    0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x2c,0x20,0x69,0x6e,0x2e,0x66,
    0x73,0x5f,0x75,0x76,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x77,0x69,0x74,
    0x63,0x68,0x20,0x28,0x5f,0x32,0x39,0x2e,0x75,0x6e,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x5f,0x6d,0x6f,0x64,0x65,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x31,0x3a,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x28,0x5f,0x36,0x36,0x20,0x2b,0x20,0x74,0x65,0x78,0x30,0x29,
    0x20,0x2a,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,
    0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x32,0x3a,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x28,0x28,0x5f,0x36,0x36,0x20,0x2a,0x20,0x74,0x65,0x78,0x30,
    0x29,0x20,0x2a,0x20,0x32,0x2e,0x30,0x29,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x66,0x73,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,
    0x65,0x20,0x33,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x28,0x28,0x5f,0x36,
    0x36,0x20,0x2a,0x20,0x74,0x65,0x78,0x30,0x29,0x20,0x2a,0x20,0x34,0x2e,0x30,0x29,
    0x20,0x2a,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,
    0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x64,0x65,0x66,0x61,0x75,0x6c,0x74,0x3a,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x28,0x5f,0x36,0x36,0x20,0x2a,0x20,0x74,0x65,0x78,0x30,
    0x29,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,
    0x61,0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x2e,
    0x75,0x6e,0x5f,0x61,0x6c,0x70,0x68,0x61,0x5f,0x74,0x65,0x73,0x74,0x20,0x3e,0x3d,
    0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,
    0x77,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x5f,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,
    0x74,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct mesh_color_texture_vs_params
    {
        float4x4 un_mvp;
        float4x4 tex0_mat;
        float4x4 tex1_mat;
    };

    struct main0_out
    {
        float4 fs_color [[user(locn0)]];
        float2 fs_uv0 [[user(locn1)]];
        float2 fs_uv1 [[user(locn2)]];
        float4 gl_Position [[position]];
    };

    struct main0_in
    {
        float3 vs_position [[attribute(0)]];
        float4 vs_color [[attribute(1)]];
        float2 vs_texcoord0 [[attribute(2)]];
        float2 vs_texcoord1 [[attribute(3)]];
    };

    vertex main0_out main0(main0_in in [[stage_in]], constant mesh_color_texture_vs_params& _19 [[buffer(0)]])
    {
        main0_out out = {};
        out.gl_Position = _19.un_mvp * float4(in.vs_position, 1.0);
        out.fs_color = in.vs_color;
        out.fs_uv0 = (_19.tex0_mat * float4(in.vs_texcoord0, 1.0, 1.0)).xy;
        out.fs_uv1 = (_19.tex1_mat * float4(in.vs_texcoord1, 1.0, 1.0)).xy;
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t mesh_color_tex2_vs_source_metal_ios[926] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x75,0x6e,0x5f,0x6d,0x76,
    0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,
    0x74,0x65,0x78,0x30,0x5f,0x6d,0x61,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x74,0x65,0x78,0x31,0x5f,0x6d,0x61,0x74,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x75,0x73,
    0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x5b,
    0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,
    0x31,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x32,0x29,0x5d,
    0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,
    0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x76,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x61,0x74,0x74,
    0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,
    0x6f,0x72,0x64,0x30,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,
    0x28,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x31,0x20,0x5b,
    0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x33,0x29,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x6d,
    0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x31,0x39,
    0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,
    0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,
    0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x5f,0x31,0x39,0x2e,0x75,0x6e,0x5f,0x6d,0x76,0x70,0x20,0x2a,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,
    0x74,0x2e,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x69,0x6e,0x2e,
    0x76,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,
    0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x3d,0x20,0x28,0x5f,0x31,0x39,0x2e,
    0x74,0x65,0x78,0x30,0x5f,0x6d,0x61,0x74,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x69,0x6e,0x2e,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,
    0x30,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x31,
    0x20,0x3d,0x20,0x28,0x5f,0x31,0x39,0x2e,0x74,0x65,0x78,0x31,0x5f,0x6d,0x61,0x74,
    0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x76,0x73,0x5f,
    0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x31,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct mesh_color_texture_fs_params
    {
        int un_color_mode;
        float un_tex2_lerp;
        float un_alpha_test;
    };

    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };

    struct main0_in
    {
        float4 fs_color [[user(locn0)]];
        float2 fs_uv0 [[user(locn1)]];
        float2 fs_uv1 [[user(locn2)]];
    };

    fragment main0_out main0(main0_in in [[stage_in]], constant mesh_color_texture_fs_params& _29 [[buffer(0)]], texture2d<float> un_tex0 [[texture(0)]], texture2d<float> un_tex1 [[texture(1)]], sampler un_sampler0 [[sampler(0)]])
    {
        main0_out out = {};
        float4 tex0 = un_tex0.sample(un_sampler0, in.fs_uv0);
        if (0.0 <= _29.un_tex2_lerp)
        {
            float _50 = 1.0 - _29.un_tex2_lerp;
            tex0 = fma(tex0, float4(_29.un_tex2_lerp, _29.un_tex2_lerp, _29.un_tex2_lerp, 1.0), float4(_50, _50, _50, 0.0));
        }
        float4 _66 = un_tex1.sample(un_sampler0, in.fs_uv1);
        switch (_29.un_color_mode)
        {
            case 1:
            {
                out.frag_color = (_66 + tex0) * in.fs_color;
                break;
            }
            case 2:
            {
                out.frag_color = ((_66 * tex0) * 2.0) * in.fs_color;
                break;
            }
            case 3:
            {
                out.frag_color = ((_66 * tex0) * 4.0) * in.fs_color;
                break;
            }
            default:
            {
                out.frag_color = (_66 * tex0) * in.fs_color;
                break;
            }
        }
        if (_29.un_alpha_test >= out.frag_color.w)
        {
            discard_fragment();
        }
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t mesh_color_tex2_fs_source_metal_ios[1567] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x6e,0x74,0x20,0x75,0x6e,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x6d,
    0x6f,0x64,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x75,
    0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x75,0x6e,0x5f,0x61,0x6c,0x70,0x68,0x61,0x5f,
    0x74,0x65,0x73,0x74,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x5b,0x5b,
    0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x32,0x29,0x5d,0x5d,
    0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,
    0x74,0x20,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,
    0x5f,0x32,0x39,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,
    0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,
    0x61,0x74,0x3e,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x20,0x5b,0x5b,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x75,0x6e,0x5f,
    0x74,0x65,0x78,0x31,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x31,
    0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x75,0x6e,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,
    0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x74,0x65,
    0x78,0x30,0x20,0x3d,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x2e,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x28,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x2c,
    0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x75,0x76,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x30,0x2e,0x30,0x20,0x3c,0x3d,0x20,0x5f,0x32,0x39,0x2e,
    0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,0x29,0x0a,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x5f,0x35,0x30,0x20,0x3d,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,0x5f,0x32,
    0x39,0x2e,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x74,0x65,0x78,0x30,0x20,0x3d,0x20,0x66,
    0x6d,0x61,0x28,0x74,0x65,0x78,0x30,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x5f,0x32,0x39,0x2e,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,
    0x2c,0x20,0x5f,0x32,0x39,0x2e,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,
    0x72,0x70,0x2c,0x20,0x5f,0x32,0x39,0x2e,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,
    0x6c,0x65,0x72,0x70,0x2c,0x20,0x31,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x28,0x5f,0x35,0x30,0x2c,0x20,0x5f,0x35,0x30,0x2c,0x20,0x5f,0x35,0x30,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x36,0x36,0x20,0x3d,0x20,
    0x75,0x6e,0x5f,0x74,0x65,0x78,0x31,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x75,
    0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x2c,0x20,0x69,0x6e,0x2e,0x66,
    0x73,0x5f,0x75,0x76,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x77,0x69,0x74,
    0x63,0x68,0x20,0x28,0x5f,0x32,0x39,0x2e,0x75,0x6e,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x5f,0x6d,0x6f,0x64,0x65,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x31,0x3a,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x28,0x5f,0x36,0x36,0x20,0x2b,0x20,0x74,0x65,0x78,0x30,0x29,
    0x20,0x2a,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,
    0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x32,0x3a,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x28,0x28,0x5f,0x36,0x36,0x20,0x2a,0x20,0x74,0x65,0x78,0x30,
    0x29,0x20,0x2a,0x20,0x32,0x2e,0x30,0x29,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x66,0x73,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,
    0x65,0x20,0x33,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x28,0x28,0x5f,0x36,
    0x36,0x20,0x2a,0x20,0x74,0x65,0x78,0x30,0x29,0x20,0x2a,0x20,0x34,0x2e,0x30,0x29,
    0x20,0x2a,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,
    0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x64,0x65,0x66,0x61,0x75,0x6c,0x74,0x3a,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x28,0x5f,0x36,0x36,0x20,0x2a,0x20,0x74,0x65,0x78,0x30,
    0x29,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,
    0x61,0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x2e,
    0x75,0x6e,0x5f,0x61,0x6c,0x70,0x68,0x61,0x5f,0x74,0x65,0x73,0x74,0x20,0x3e,0x3d,
    0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,
    0x77,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x5f,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,
    0x74,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct mesh_color_texture_vs_params
    {
        float4x4 un_mvp;
        float4x4 tex0_mat;
        float4x4 tex1_mat;
    };

    struct main0_out
    {
        float4 fs_color [[user(locn0)]];
        float2 fs_uv0 [[user(locn1)]];
        float2 fs_uv1 [[user(locn2)]];
        float4 gl_Position [[position]];
    };

    struct main0_in
    {
        float3 vs_position [[attribute(0)]];
        float4 vs_color [[attribute(1)]];
        float2 vs_texcoord0 [[attribute(2)]];
        float2 vs_texcoord1 [[attribute(3)]];
    };

    vertex main0_out main0(main0_in in [[stage_in]], constant mesh_color_texture_vs_params& _19 [[buffer(0)]])
    {
        main0_out out = {};
        out.gl_Position = _19.un_mvp * float4(in.vs_position, 1.0);
        out.fs_color = in.vs_color;
        out.fs_uv0 = (_19.tex0_mat * float4(in.vs_texcoord0, 1.0, 1.0)).xy;
        out.fs_uv1 = (_19.tex1_mat * float4(in.vs_texcoord1, 1.0, 1.0)).xy;
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t mesh_color_tex2_vs_source_metal_sim[926] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x75,0x6e,0x5f,0x6d,0x76,
    0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,
    0x74,0x65,0x78,0x30,0x5f,0x6d,0x61,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x74,0x65,0x78,0x31,0x5f,0x6d,0x61,0x74,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x75,0x73,
    0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x5b,
    0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,
    0x31,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x32,0x29,0x5d,
    0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,
    0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x76,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x61,0x74,0x74,
    0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,
    0x6f,0x72,0x64,0x30,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,
    0x28,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x31,0x20,0x5b,
    0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x33,0x29,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x6d,
    0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,0x5f,0x31,0x39,
    0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,
    0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,
    0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x5f,0x31,0x39,0x2e,0x75,0x6e,0x5f,0x6d,0x76,0x70,0x20,0x2a,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x76,0x73,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,
    0x74,0x2e,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x69,0x6e,0x2e,
    0x76,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,
    0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x3d,0x20,0x28,0x5f,0x31,0x39,0x2e,
    0x74,0x65,0x78,0x30,0x5f,0x6d,0x61,0x74,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x69,0x6e,0x2e,0x76,0x73,0x5f,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,
    0x30,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x73,0x5f,0x75,0x76,0x31,
    0x20,0x3d,0x20,0x28,0x5f,0x31,0x39,0x2e,0x74,0x65,0x78,0x31,0x5f,0x6d,0x61,0x74,
    0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x76,0x73,0x5f,
    0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x31,0x2c,0x20,0x31,0x2e,0x30,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct mesh_color_texture_fs_params
    {
        int un_color_mode;
        float un_tex2_lerp;
        float un_alpha_test;
    };

    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };

    struct main0_in
    {
        float4 fs_color [[user(locn0)]];
        float2 fs_uv0 [[user(locn1)]];
        float2 fs_uv1 [[user(locn2)]];
    };

    fragment main0_out main0(main0_in in [[stage_in]], constant mesh_color_texture_fs_params& _29 [[buffer(0)]], texture2d<float> un_tex0 [[texture(0)]], texture2d<float> un_tex1 [[texture(1)]], sampler un_sampler0 [[sampler(0)]])
    {
        main0_out out = {};
        float4 tex0 = un_tex0.sample(un_sampler0, in.fs_uv0);
        if (0.0 <= _29.un_tex2_lerp)
        {
            float _50 = 1.0 - _29.un_tex2_lerp;
            tex0 = fma(tex0, float4(_29.un_tex2_lerp, _29.un_tex2_lerp, _29.un_tex2_lerp, 1.0), float4(_50, _50, _50, 0.0));
        }
        float4 _66 = un_tex1.sample(un_sampler0, in.fs_uv1);
        switch (_29.un_color_mode)
        {
            case 1:
            {
                out.frag_color = (_66 + tex0) * in.fs_color;
                break;
            }
            case 2:
            {
                out.frag_color = ((_66 * tex0) * 2.0) * in.fs_color;
                break;
            }
            case 3:
            {
                out.frag_color = ((_66 * tex0) * 4.0) * in.fs_color;
                break;
            }
            default:
            {
                out.frag_color = (_66 * tex0) * in.fs_color;
                break;
            }
        }
        if (_29.un_alpha_test >= out.frag_color.w)
        {
            discard_fragment();
        }
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t mesh_color_tex2_fs_source_metal_sim[1567] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x6e,0x74,0x20,0x75,0x6e,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x6d,
    0x6f,0x64,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x75,
    0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x75,0x6e,0x5f,0x61,0x6c,0x70,0x68,0x61,0x5f,
    0x74,0x65,0x73,0x74,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x30,0x20,0x5b,0x5b,
    0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x73,0x5f,0x75,0x76,0x31,
    0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x32,0x29,0x5d,0x5d,
    0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,
    0x74,0x20,0x6d,0x65,0x73,0x68,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x26,0x20,
    0x5f,0x32,0x39,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,
    0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,
    0x61,0x74,0x3e,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x20,0x5b,0x5b,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x75,0x6e,0x5f,
    0x74,0x65,0x78,0x31,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x31,
    0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x75,0x6e,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,
    0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x74,0x65,
    0x78,0x30,0x20,0x3d,0x20,0x75,0x6e,0x5f,0x74,0x65,0x78,0x30,0x2e,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x28,0x75,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x2c,
    0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x75,0x76,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x30,0x2e,0x30,0x20,0x3c,0x3d,0x20,0x5f,0x32,0x39,0x2e,
    0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,0x29,0x0a,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x5f,0x35,0x30,0x20,0x3d,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,0x5f,0x32,
    0x39,0x2e,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x74,0x65,0x78,0x30,0x20,0x3d,0x20,0x66,
    0x6d,0x61,0x28,0x74,0x65,0x78,0x30,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x5f,0x32,0x39,0x2e,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,0x72,0x70,
    0x2c,0x20,0x5f,0x32,0x39,0x2e,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,0x6c,0x65,
    0x72,0x70,0x2c,0x20,0x5f,0x32,0x39,0x2e,0x75,0x6e,0x5f,0x74,0x65,0x78,0x32,0x5f,
    0x6c,0x65,0x72,0x70,0x2c,0x20,0x31,0x2e,0x30,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x28,0x5f,0x35,0x30,0x2c,0x20,0x5f,0x35,0x30,0x2c,0x20,0x5f,0x35,0x30,
    0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x36,0x36,0x20,0x3d,0x20,
    0x75,0x6e,0x5f,0x74,0x65,0x78,0x31,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x75,
    0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x30,0x2c,0x20,0x69,0x6e,0x2e,0x66,
    0x73,0x5f,0x75,0x76,0x31,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x77,0x69,0x74,
    0x63,0x68,0x20,0x28,0x5f,0x32,0x39,0x2e,0x75,0x6e,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x5f,0x6d,0x6f,0x64,0x65,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x31,0x3a,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x28,0x5f,0x36,0x36,0x20,0x2b,0x20,0x74,0x65,0x78,0x30,0x29,
    0x20,0x2a,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,
    0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x32,0x3a,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x28,0x28,0x5f,0x36,0x36,0x20,0x2a,0x20,0x74,0x65,0x78,0x30,
    0x29,0x20,0x2a,0x20,0x32,0x2e,0x30,0x29,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x66,0x73,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,
    0x65,0x20,0x33,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x28,0x28,0x5f,0x36,
    0x36,0x20,0x2a,0x20,0x74,0x65,0x78,0x30,0x29,0x20,0x2a,0x20,0x34,0x2e,0x30,0x29,
    0x20,0x2a,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,
    0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x64,0x65,0x66,0x61,0x75,0x6c,0x74,0x3a,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x28,0x5f,0x36,0x36,0x20,0x2a,0x20,0x74,0x65,0x78,0x30,
    0x29,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x66,0x73,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,
    0x61,0x6b,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x2e,
    0x75,0x6e,0x5f,0x61,0x6c,0x70,0x68,0x61,0x5f,0x74,0x65,0x73,0x74,0x20,0x3e,0x3d,
    0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,
    0x77,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x5f,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,
    0x74,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
static inline const sg_shader_desc* mesh_color_tex2_program_shader_desc(sg_backend backend) {
    #if defined(SOKOL_GLCORE)
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.attrs[0].name = "vs_position";
            desc.attrs[1].name = "vs_color";
            desc.attrs[2].name = "vs_texcoord0";
            desc.attrs[3].name = "vs_texcoord1";
            desc.vs.source = (const char*)mesh_color_tex2_vs_source_glsl410;
            desc.vs.entry = "main";
            desc.vs.uniform_blocks[0].size = 192;
            desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.vs.uniform_blocks[0].uniforms[0].name = "mesh_color_texture_vs_params";
            desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.vs.uniform_blocks[0].uniforms[0].array_count = 12;
            desc.fs.source = (const char*)mesh_color_tex2_fs_source_glsl410;
            desc.fs.entry = "main";
            desc.fs.uniform_blocks[0].size = 16;
            desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.uniform_blocks[0].uniforms[0].name = "_29.un_color_mode";
            desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_INT;
            desc.fs.uniform_blocks[0].uniforms[0].array_count = 0;
            desc.fs.uniform_blocks[0].uniforms[1].name = "_29.un_tex2_lerp";
            desc.fs.uniform_blocks[0].uniforms[1].type = SG_UNIFORMTYPE_FLOAT;
            desc.fs.uniform_blocks[0].uniforms[1].array_count = 0;
            desc.fs.uniform_blocks[0].uniforms[2].name = "_29.un_alpha_test";
            desc.fs.uniform_blocks[0].uniforms[2].type = SG_UNIFORMTYPE_FLOAT;
            desc.fs.uniform_blocks[0].uniforms[2].array_count = 0;
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.images[1].used = true;
            desc.fs.images[1].multisampled = false;
            desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[1].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.fs.image_sampler_pairs[0].glsl_name = "un_tex0_un_sampler0";
            desc.fs.image_sampler_pairs[1].used = true;
            desc.fs.image_sampler_pairs[1].image_slot = 1;
            desc.fs.image_sampler_pairs[1].sampler_slot = 0;
            desc.fs.image_sampler_pairs[1].glsl_name = "un_tex1_un_sampler0";
            desc.label = "mesh_color_tex2_program_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_GLCORE */
    #if defined(SOKOL_GLES3)
    if (backend == SG_BACKEND_GLES3) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.attrs[0].name = "vs_position";
            desc.attrs[1].name = "vs_color";
            desc.attrs[2].name = "vs_texcoord0";
            desc.attrs[3].name = "vs_texcoord1";
            desc.vs.source = (const char*)mesh_color_tex2_vs_source_glsl300es;
            desc.vs.entry = "main";
            desc.vs.uniform_blocks[0].size = 192;
            desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.vs.uniform_blocks[0].uniforms[0].name = "mesh_color_texture_vs_params";
            desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.vs.uniform_blocks[0].uniforms[0].array_count = 12;
            desc.fs.source = (const char*)mesh_color_tex2_fs_source_glsl300es;
            desc.fs.entry = "main";
            desc.fs.uniform_blocks[0].size = 16;
            desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.uniform_blocks[0].uniforms[0].name = "_29.un_color_mode";
            desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_INT;
            desc.fs.uniform_blocks[0].uniforms[0].array_count = 0;
            desc.fs.uniform_blocks[0].uniforms[1].name = "_29.un_tex2_lerp";
            desc.fs.uniform_blocks[0].uniforms[1].type = SG_UNIFORMTYPE_FLOAT;
            desc.fs.uniform_blocks[0].uniforms[1].array_count = 0;
            desc.fs.uniform_blocks[0].uniforms[2].name = "_29.un_alpha_test";
            desc.fs.uniform_blocks[0].uniforms[2].type = SG_UNIFORMTYPE_FLOAT;
            desc.fs.uniform_blocks[0].uniforms[2].array_count = 0;
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.images[1].used = true;
            desc.fs.images[1].multisampled = false;
            desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[1].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.fs.image_sampler_pairs[0].glsl_name = "un_tex0_un_sampler0";
            desc.fs.image_sampler_pairs[1].used = true;
            desc.fs.image_sampler_pairs[1].image_slot = 1;
            desc.fs.image_sampler_pairs[1].sampler_slot = 0;
            desc.fs.image_sampler_pairs[1].glsl_name = "un_tex1_un_sampler0";
            desc.label = "mesh_color_tex2_program_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_GLES3 */
    #if defined(SOKOL_D3D11)
    if (backend == SG_BACKEND_D3D11) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.attrs[0].sem_name = "TEXCOORD";
            desc.attrs[0].sem_index = 0;
            desc.attrs[1].sem_name = "TEXCOORD";
            desc.attrs[1].sem_index = 1;
            desc.attrs[2].sem_name = "TEXCOORD";
            desc.attrs[2].sem_index = 2;
            desc.attrs[3].sem_name = "TEXCOORD";
            desc.attrs[3].sem_index = 3;
            desc.vs.source = (const char*)mesh_color_tex2_vs_source_hlsl5;
            desc.vs.d3d11_target = "vs_5_0";
            desc.vs.entry = "main";
            desc.vs.uniform_blocks[0].size = 192;
            desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.source = (const char*)mesh_color_tex2_fs_source_hlsl5;
            desc.fs.d3d11_target = "ps_5_0";
            desc.fs.entry = "main";
            desc.fs.uniform_blocks[0].size = 16;
            desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.images[1].used = true;
            desc.fs.images[1].multisampled = false;
            desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[1].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.fs.image_sampler_pairs[1].used = true;
            desc.fs.image_sampler_pairs[1].image_slot = 1;
            desc.fs.image_sampler_pairs[1].sampler_slot = 0;
            desc.label = "mesh_color_tex2_program_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_D3D11 */
    #if defined(SOKOL_METAL)
    if (backend == SG_BACKEND_METAL_MACOS) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vs.source = (const char*)mesh_color_tex2_vs_source_metal_macos;
            desc.vs.entry = "main0";
            desc.vs.uniform_blocks[0].size = 192;
            desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.source = (const char*)mesh_color_tex2_fs_source_metal_macos;
            desc.fs.entry = "main0";
            desc.fs.uniform_blocks[0].size = 16;
            desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.images[1].used = true;
            desc.fs.images[1].multisampled = false;
            desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[1].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.fs.image_sampler_pairs[1].used = true;
            desc.fs.image_sampler_pairs[1].image_slot = 1;
            desc.fs.image_sampler_pairs[1].sampler_slot = 0;
            desc.label = "mesh_color_tex2_program_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_METAL */
    #if defined(SOKOL_METAL)
    if (backend == SG_BACKEND_METAL_IOS) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vs.source = (const char*)mesh_color_tex2_vs_source_metal_ios;
            desc.vs.entry = "main0";
            desc.vs.uniform_blocks[0].size = 192;
            desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.source = (const char*)mesh_color_tex2_fs_source_metal_ios;
            desc.fs.entry = "main0";
            desc.fs.uniform_blocks[0].size = 16;
            desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.images[1].used = true;
            desc.fs.images[1].multisampled = false;
            desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[1].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.fs.image_sampler_pairs[1].used = true;
            desc.fs.image_sampler_pairs[1].image_slot = 1;
            desc.fs.image_sampler_pairs[1].sampler_slot = 0;
            desc.label = "mesh_color_tex2_program_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_METAL */
    #if defined(SOKOL_METAL)
    if (backend == SG_BACKEND_METAL_SIMULATOR) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vs.source = (const char*)mesh_color_tex2_vs_source_metal_sim;
            desc.vs.entry = "main0";
            desc.vs.uniform_blocks[0].size = 192;
            desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.source = (const char*)mesh_color_tex2_fs_source_metal_sim;
            desc.fs.entry = "main0";
            desc.fs.uniform_blocks[0].size = 16;
            desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.images[1].used = true;
            desc.fs.images[1].multisampled = false;
            desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[1].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.fs.image_sampler_pairs[1].used = true;
            desc.fs.image_sampler_pairs[1].image_slot = 1;
            desc.fs.image_sampler_pairs[1].sampler_slot = 0;
            desc.label = "mesh_color_tex2_program_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_METAL */
    return 0;
}
static inline int mesh_color_tex2_program_attr_slot(const char* attr_name) {
    (void)attr_name;
    if (0 == strcmp(attr_name, "vs_position")) {
        return 0;
    }
    if (0 == strcmp(attr_name, "vs_color")) {
        return 1;
    }
    if (0 == strcmp(attr_name, "vs_texcoord0")) {
        return 2;
    }
    if (0 == strcmp(attr_name, "vs_texcoord1")) {
        return 3;
    }
    return -1;
}
static inline int mesh_color_tex2_program_image_slot(sg_shader_stage stage, const char* img_name) {
    (void)stage; (void)img_name;
    if (SG_SHADERSTAGE_FS == stage) {
        if (0 == strcmp(img_name, "un_tex0")) {
            return 0;
        }
        if (0 == strcmp(img_name, "un_tex1")) {
            return 1;
        }
    }
    return -1;
}
static inline int mesh_color_tex2_program_sampler_slot(sg_shader_stage stage, const char* smp_name) {
    (void)stage; (void)smp_name;
    if (SG_SHADERSTAGE_FS == stage) {
        if (0 == strcmp(smp_name, "un_sampler0")) {
            return 0;
        }
    }
    return -1;
}
static inline int mesh_color_tex2_program_uniformblock_slot(sg_shader_stage stage, const char* ub_name) {
    (void)stage; (void)ub_name;
    if (SG_SHADERSTAGE_VS == stage) {
        if (0 == strcmp(ub_name, "mesh_color_texture_vs_params")) {
            return 0;
        }
    }
    if (SG_SHADERSTAGE_FS == stage) {
        if (0 == strcmp(ub_name, "mesh_color_texture_fs_params")) {
            return 0;
        }
    }
    return -1;
}
static inline size_t mesh_color_tex2_program_uniformblock_size(sg_shader_stage stage, const char* ub_name) {
    (void)stage; (void)ub_name;
    if (SG_SHADERSTAGE_VS == stage) {
        if (0 == strcmp(ub_name, "mesh_color_texture_vs_params")) {
            return sizeof(mesh_color_tex2_mesh_color_texture_vs_params_t);
        }
    }
    if (SG_SHADERSTAGE_FS == stage) {
        if (0 == strcmp(ub_name, "mesh_color_texture_fs_params")) {
            return sizeof(mesh_color_tex2_mesh_color_texture_fs_params_t);
        }
    }
    return 0;
}
static inline int mesh_color_tex2_program_uniform_offset(sg_shader_stage stage, const char* ub_name, const char* u_name) {
    (void)stage; (void)ub_name; (void)u_name;
    if (SG_SHADERSTAGE_VS == stage) {
        if (0 == strcmp(ub_name, "mesh_color_texture_vs_params")) {
            if (0 == strcmp(u_name, "un_mvp")) {
                return 0;
            }
            if (0 == strcmp(u_name, "tex0_mat")) {
                return 64;
            }
            if (0 == strcmp(u_name, "tex1_mat")) {
                return 128;
            }
        }
    }
    if (SG_SHADERSTAGE_FS == stage) {
        if (0 == strcmp(ub_name, "mesh_color_texture_fs_params")) {
            if (0 == strcmp(u_name, "un_color_mode")) {
                return 0;
            }
            if (0 == strcmp(u_name, "un_tex2_lerp")) {
                return 4;
            }
            if (0 == strcmp(u_name, "un_alpha_test")) {
                return 8;
            }
        }
    }
    return -1;
}
static inline sg_shader_uniform_desc mesh_color_tex2_program_uniform_desc(sg_shader_stage stage, const char* ub_name, const char* u_name) {
    (void)stage; (void)ub_name; (void)u_name;
    #if defined(__cplusplus)
    sg_shader_uniform_desc desc = {};
    #else
    sg_shader_uniform_desc desc = {0};
    #endif
    if (SG_SHADERSTAGE_VS == stage) {
        if (0 == strcmp(ub_name, "mesh_color_texture_vs_params")) {
            if (0 == strcmp(u_name, "un_mvp")) {
                desc.name = "un_mvp";
                desc.type = SG_UNIFORMTYPE_MAT4;
                desc.array_count = 0;
                return desc;
            }
            if (0 == strcmp(u_name, "tex0_mat")) {
                desc.name = "tex0_mat";
                desc.type = SG_UNIFORMTYPE_MAT4;
                desc.array_count = 0;
                return desc;
            }
            if (0 == strcmp(u_name, "tex1_mat")) {
                desc.name = "tex1_mat";
                desc.type = SG_UNIFORMTYPE_MAT4;
                desc.array_count = 0;
                return desc;
            }
        }
    }
    if (SG_SHADERSTAGE_FS == stage) {
        if (0 == strcmp(ub_name, "mesh_color_texture_fs_params")) {
            if (0 == strcmp(u_name, "un_color_mode")) {
                desc.name = "un_color_mode";
                desc.type = SG_UNIFORMTYPE_INT;
                desc.array_count = 0;
                return desc;
            }
            if (0 == strcmp(u_name, "un_tex2_lerp")) {
                desc.name = "un_tex2_lerp";
                desc.type = SG_UNIFORMTYPE_FLOAT;
                desc.array_count = 0;
                return desc;
            }
            if (0 == strcmp(u_name, "un_alpha_test")) {
                desc.name = "un_alpha_test";
                desc.type = SG_UNIFORMTYPE_FLOAT;
                desc.array_count = 0;
                return desc;
            }
        }
    }
    return desc;
}
static inline int mesh_color_tex2_program_storagebuffer_slot(sg_shader_stage stage, const char* sbuf_name) {
    (void)stage; (void)sbuf_name;
    return -1;
}
